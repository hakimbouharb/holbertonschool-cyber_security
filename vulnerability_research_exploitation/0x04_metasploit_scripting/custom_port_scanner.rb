#!/usr/bin/env ruby

require 'msf/core'
class MetasploitModule < Msf::Auxiliary
  include Msf::Exploit::Remote::Tcp

  def initialize
    super(
      'Name'        => 'Custom Port Scanner',
      'Description' => 'Scans a range of ports on a target system to identify open ports',
      'Author'      => ['Your Name'],
      'License'     => MSF_LICENSE
    )
    register_options(
      [
        Opt::RHOST(),
        Opt::RPORT(80),
        OptInt.new('STARTPORT', [true, "Starting port", 20]),
        OptInt.new('ENDPORT', [true, "Ending port", 1000])
      ], self.class)
  end
  
  def run
    #collect target info
    target_ip = datastore['RHOST']
    start_port = datastoe['STARTPORT']
    end_port = datastore['ENDPORT']

    print_status("Running module against #{target_ip}")

    # Loop through the range of ports
    (start_port ..end_port).each do |port|
      begin
        connect
        res = send_raw_data("GET / HTTP/1.0\r\n\r\n", port)
        print_good("#{target_ip}:#{port} - Port #{port} is open on #{target_ip}")
      rescue ::Rex::ConnectionError
        print_error("#{target_ip}:#{port} - Port is closed on #{target_ip}")
      ensure
        disconnect
      end
    end

    print_status("Scan complete!")
  end
end
